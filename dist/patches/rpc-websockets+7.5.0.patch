diff --git a/node_modules/rpc-websockets/dist/lib/client.js b/node_modules/rpc-websockets/dist/lib/client.js
index 348cbbd..7aea572 100644
--- a/node_modules/rpc-websockets/dist/lib/client.js
+++ b/node_modules/rpc-websockets/dist/lib/client.js
@@ -29,6 +29,10 @@ var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime
 var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
 
 var _eventemitter = require("eventemitter3");
+// var { parse } = require('lossless-json');
+// var JSONBigNumber = require('json-bignumber');
+// var JSONbig = require('json-bigint');
+var JSONbig = require('json-bigint')({ useNativeBigInt: true });
 
 function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
 
@@ -158,12 +162,21 @@ var CommonClient = /*#__PURE__*/function (_EventEmitter) {
           id: rpc_id
         };
 
+        console.log("client.call - message", message);
+        console.log("client.call - JSONbig.stringify(message) ", JSONbig.stringify(message));
+
+        // ToDo: add JSONbig.stringify v
         _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {
+          console.log("inside socket.send", error);
+          console.log("resolve, reject", [resolve, reject]);
+
           if (error) return reject(error);
           _this2.queue[rpc_id] = {
             promise: [resolve, reject]
           };
 
+          console.log("_this2.queue", _this2.queue);
+
           if (timeout) {
             _this2.queue[rpc_id].timeout = setTimeout(function () {
               delete _this2.queue[rpc_id];
@@ -273,8 +286,10 @@ var CommonClient = /*#__PURE__*/function (_EventEmitter) {
           method: method,
           params: params || null
         };
+        console.log("notify", message);
 
         _this3.socket.send(JSON.stringify(message), function (error) {
+          console.log("notify.send", message);
           if (error) return reject(error);
           resolve();
         });
@@ -416,7 +431,80 @@ var CommonClient = /*#__PURE__*/function (_EventEmitter) {
         if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();
 
         try {
-          message = JSON.parse(message);
+          console.log("original message", message);
+          // console.log("JSON-BIG RANGE: ", BigNumber.config().RANGE);
+          // console.log("JSON-BIG RANGE: ", BigNumber);
+          // console.log("JSON-BIG RANGE: ", BigNumber.config());
+
+          // console.log("test");
+          // console.log("#### parse -loseless ###",parse(message));
+          // console.log("#### JSONBigNumber ###",JSONBigNumber.parse(message));
+          
+          const parseToBigInt = (input) => {
+            // function that implements desired criteria
+            // to separate *big numbers* from *small* ones
+            //
+            // (works for input parameter num of type number/string)
+            const isBigNumber = (num) => {
+              return  !Number.isSafeInteger(+num) 
+            } 
+            // function that enquotes *big numbers* matching
+            // desired criteria into double quotes inside
+            // JSON string
+            //
+            // (function checking for *big numbers* may be
+            // passed as a second parameter for flexibility)
+            const enquoteBigNumber = (jsonString, bigNumChecker) =>
+                jsonString
+                    .replaceAll(
+                        /([:\s\[,]*)(\d+)([\s,\]]*)/g,
+                        (matchingSubstr, prefix, bigNum, suffix) =>
+                        {
+                          console.log("matchingSubstr", matchingSubstr);
+                          console.log("prefix", prefix);
+                          console.log("bigNum", bigNum);
+                          console.log("suffix", suffix);
+                          // console.log("bigNum.toLowerCase()", bigNum.toLowerCase());
+                          // console.log("bigNum.toLowerCase().startsWith('0x')", bigNum.toLowerCase().startsWith('0x'));
+                          return bigNumChecker(bigNum)
+                              ? `${prefix}"${bigNum}"${suffix}`
+                              : matchingSubstr
+                        }
+                    )
+  
+  
+            // parser that turns matching *big numbers* in
+            // source JSON string to bigint
+  
+            const parseWithBigInt = (jsonString, bigNumChecker) =>
+                JSON.parse(
+                    enquoteBigNumber(jsonString, bigNumChecker),
+                    (key, value) =>
+                        !isNaN(value) && bigNumChecker(value)
+                            ? BigInt(value)
+                            : value
+                )
+  
+            // resulting output
+  
+            return parseWithBigInt(input, isBigNumber);
+          }
+          
+          // message = parseToBigInt(message);
+          // console.log("parseWithBigInt message", message);  
+
+          const parsedMessage = JSONbig.parse(message);
+          console.log("#### JSONbig.parsed ###", {...parsedMessage});
+          console.log("#### JSONbig.parsed.stringifyed ###", JSONbig.stringify({...parsedMessage}));
+
+          // message = {
+          //   ...parsedMessage,
+          //   result: {
+          //     ...parsedMessage.result,
+          //     rawMessageData: message
+          //   }
+          // }
+          message = parsedMessage;
         } catch (error) {
           return;
         } // check if any listeners are attached and forward event
